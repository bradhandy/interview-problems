Date Range

1. Create a component, or class, to represent a date range.

A date range consists of a start date and an end date.  Don't worry about keeping track of time.


2. Add a method to determine if one date range is equal to another.

Given the following date range illustrations:

A:  |------------|
B:       |---------|
C:  |------------|

A and C would be considered equal since the start and end at the same point in time. However A and C
would not be equal to B since B starts after both A and C, and B ends after both A and C.


3. Add a method to determine if one date range overlaps another.

Given the following date range illustrations:

A:  |------------|
B:       |---------|
C:                  |------------|
D:                               |--------|

A and B would be considered as overlapping each other, and C and D would be considered overlapping
each other.  However, C and D do not overlap either A or B.


4. Add a method to merge a date range with an overlapping date range.

Given the following date range illustration and a merge method called 'mW':

A: |-----|
B:        |-----|
C:    |-----|


A.mW(B) and B.mW(A) would fail, because the ranges do not overlap.
A.mW(C) and C.mW(A) would return a merged date range with the start date of A and the end date of C.
C.mW(B) and B.mW(C) would return a merged date range with the start date of C and the end date of B.


5. Add a method taking a list of date ranges and return a list of date ranges
where all overlapping date ranges in the original list are merged.

Given the following date range illustrations:

A:                  |------------|
B:  |------------|
C:                               |--------|
D:       |---------|
E:                                         |---|

The method would return the following list:

A':                 |---------------------|
B': |--------------|
C':                                        |---|
